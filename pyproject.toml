[tool.poetry]
name = "AngelaMCP"
version = "1.0.0"
description = "Multi-AI Agent Collaboration Platform - Orchestrating Claude Code, OpenAI, and Gemini"
authors = ["CarterPerez carterperez@certgames.com"]
readme = "README.md"
license = "MIT"
packages = [{include = "src"}, {include = "config"}]

[tool.poetry.scripts]
macp = "src.main:cli_main"
angelamcp = "src.main:cli_main"

[tool.poetry.dependencies]
python = "^3.10"
# Core dependencies
asyncio = "*"
asyncpg = "^0.29.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
alembic = "^1.13.0"
redis = "^5.0.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# AI/ML APIs
openai = "^1.51.0"
google-generativeai = "^0.8.0"

# CLI and UI
rich = "^13.7.0"
click = "^8.1.0"
typer = "^0.12.0"

# HTTP and networking
httpx = "^0.26.0"
aiohttp = "^3.9.0"

# Utilities
python-dotenv = "^1.0.0"
pyyaml = "^6.0.0"
psutil = "^5.9.0"
loguru = "^0.7.0"

# Development tools
black = "^23.12.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"

# Development
ipython = "^8.18.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"

# Linting and formatting
bandit = "^1.7.0"
safety = "^2.3.0"
vulture = "^2.10.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = "^0.24.0"

# Profiling and debugging
py-spy = "^0.3.0"
memory-profiler = "^0.61.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration - Fast Python linter
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "DTZ",  # flake8-datetimez
    "Q",    # flake8-quotes
    "PTH",  # flake8-use-pathlib
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
    "G",    # flake8-logging-format
    "N",    # pep8-naming
    "ASYNC",# flake8-async
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe complexity
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "ERA",  # flake8-eradicate
    "NPY",  # NumPy-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert detected
    "S603",   # subprocess call - we need this for Claude Code
    "S607",   # start process with partial path - needed for CLI tools
    "DTZ003", # use of datetime.utcnow()
    "RET504", # unnecessary assignment
    "SIM108", # ternary operator
    "TRY003", # long messages in exceptions
    "EM101",  # raw string in exception
    "EM102",  # f-string in exception
    "G004",   # f-string in logging
    "PTH123", # open() should be replaced with Path.open()
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "docs",
    "scripts/migrations",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004", "S106"]
"scripts/*" = ["T201", "T203"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src", "config"]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--maxfail=1",
    "--tb=short",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_api: marks tests that require API keys",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"


[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["src", "config"]
skip_gitignore = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Bandit security linter
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601", "B602", "B603", "B607"]

# Commitizen for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/__init__.py:__version__"
]

# Semantic Release
[tool.semantic_release]
version_variable = "src/__init__.py:__version__"
version_toml = "pyproject.toml:tool.poetry.version"
upload_to_repository = false
upload_to_release = true
build_command = "poetry build"
